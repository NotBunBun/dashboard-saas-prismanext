generator client { provider = "prisma-client-js" }
datasource db  { provider = "sqlite" url = env("DATABASE_URL") }

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Tenant {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  memberships Membership[]
  customers   Customer[]
  invoices    Invoice[]
  metrics     Metric[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Membership {
  id        String  @id @default(cuid())
  role      Role
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  tenantId  String
  createdAt DateTime @default(now())
  @@unique([userId, tenantId])
}

enum Role { OWNER ADMIN MEMBER }

model Customer {
  id        String  @id @default(cuid())
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  tenantId  String
  name      String
  email     String
  createdAt DateTime @default(now())
  @@index([tenantId])
}

model Invoice {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  amountCents Int
  status      InvoiceStatus
  issuedAt    DateTime?
  dueAt       DateTime?
  createdAt   DateTime @default(now())
  @@index([tenantId])
}

enum InvoiceStatus { DRAFT SENT PAID VOID }

model Metric {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  day         DateTime
  mrrCents    Int
  activeUsers Int
  createdAt   DateTime @default(now())
  @@unique([tenantId, day])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
  @@unique([identifier, token])
}
